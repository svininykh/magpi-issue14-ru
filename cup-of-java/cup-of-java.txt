Raspberry Pi и чашечку Java, пожалуйста!
Сложность: средняя


Что вам необходимо:
- Raspberry Pi и ОС Raspbian.
- 150 Мб свободного места на SD карте.
- Базовые знания программирования.
- Базовые навыки использования командной строки.

Вступление

В данной статье я расскажу вам как писать и запускать Java программы на вашем Raspberry Pi.

Java, это язык объектно-ориентированного программирования для запуска исходного кода без необходимости комилляции под конкретную операционную систему. Также в Java входит широкий спектр технологий предназначенных для решением задач в таких областях, как запуск кластеров веб-сайтов или высоконагруженных приложений критичных к результату выполнения. В данной статье я затрону только основы данного языка. Как только вы освоите его основы, вы без труда найдёте в Интернет веб-сайты с более подробным описанием технологий Java и содержащие более сложные примеры по ним.

В начале я покажу вам, как установить Java на Raspberry Pi. Затем мы создадим пару простых Java программ... И только потом мы их запустим! 

Эта статья в начале показывает вам в общем как запустить примеры, а затем разъяснеет более глубоко принципы их работы. Идея в том, что это позволит вам легче увидеть основы написания реальных Java программ, а затем вы самостоятельно попробуете определить новые элементы и их функции. После того, как вы напишите и запустите программу, я постараюсь объяснить эти новшества.

1. Установка

Чтобы написать, копиллировать и запустить программу вам необходимо две вещи: текстовый редактор и JDK.

Вы можете использовать любой текстовый редактор для написания Java программ. Я предпочитаю Geany, так как он поддерживает подсветку синтаксиса, но Leafpad или GEdit это тоже делают.

В качестве JDK я выбрал OpenJDK 7. Стандартно в пакет JDK входит компиллятор и виртуальная машина Java(JVM). Компиллятор генерирует из исходного кода программу для выполнения, а JVM обеспечивает их запуск.

Установим Geany и OpenJDK 7 открыв окно терминала и набрав:

  sudo apt-get install openjdk-7-jdk geany

Введём Y для подтверждения установки. Это займёт около 9 минут на загрузку и установку всех необходимых пакетов, но это может занять и больше времени, так как всё зависит от скорости вашего интернет соединения.

После завершения проверьте, что всё корректно было установлено. Для этого вы можете открыть Geany из вкладки "Programming" основного меню Raspbian. А для проверки OpenJDK7, откройте окно терминала и наберите:

  java -version

На экране должно появится несколько строк начинающихся с:

  java version "1.7...
  OpenJDK ...

2. Запуск первой программы

Начнём с создания каталога для хранения наших программ. Я выбрал для него имя "cupofjava", но вы можете по желанию выбрать любое другое. Открываем окно терминала и набираем:

  mkdir cupofjava

Теперь начнём писать нашу первую программу(класс) на Java. Я назову его "HiThere". Пожалуйста помните, что Java, это объектно-ориентированный язык программирования, и что каждая программа является классом, который в свою очередь можно использовать другими классами.

Открываем текстовый редактор(в моём случае Geany) для создания файла HiThere.java и сохраняем его в предварительно созданном каталоге. В этом файле набираем(или копируем) следующий исходный код программы:

public class HiThere {

  public static void main(String[] args) {
    System.out.println("A Java Pi!");
  }

}

А теперь компилируем его. Используя окно терминала переходим в каталог "cupofjava"(где до этого вы создали программу):

  cd cupofjava

и набираем:

  javac HiThere.java

Команда javac компиллирует программы написанные на Java. Она проанализировав набранный вами исходный код генерирует программу для запуска. Через 15 секунд или около того, данная команда закончит выполнение. Если вы допустили ошибку она об этом сообщит, указав где эта проблема возникла. Для исправления вернитесь в текстовый редактор, проверьте свой код и исправьте допущенные ошибки, сохраните файл, и попробуйте запустить компилляцию повторно. Если ошибок больше нет, то компилляция выполнена успешно. После чего вы найдёте новый файл HiThere.class в текущем каталоге. Это программа и будет вами запускаться.

Хорошо, тепрь запустим нашу программу. В окне терминала набираем:

  java HiThere

Вам не обязательно указывать расширение .class. А в чём разница? Команда javac компиллирует программы, а команда java их запускает.

Программа будет запущена и выполнена:

  Hi there!

Отлично... Поздравляю! Вы написали и запустили вашу первую Java программу на Raspberry Pi.

Наверное вы заметили, что программе потребовалось несколько секунд для того, чтобы написать это сообщение. Почему так долго? На самом деле, Java работает довольно быстро. Программе в целом понадобилось только пара миллисекунд для выполнение, всё остальное время потребовалось на загрузку в начале JVM среды для выполнения Java кода. Но есть и приятная новость, что после загрузки JVM программу будет работать очень быстро.

Хорошо, а теперь можем рассмотреть программу более внимательно. В ней по сути выполняется только одна строка. Это строка:

  System.out.println("A Java Pi!");

В остальных строка задаётся название класса "HiThere" (в строке 1), а также название основного метода в строке 3). В данный класс, как и в любой другой класс Java, может входить много методов, но для данного примера мы используем только один основной метод main.

Усложним задачу #1: Ваши действия. Откройте файл с исходным кодом в текстовом редакторе, измените сообщение в кавычках с "A Java Pi!" на "My name is Name."(введите своё имя) и сохраните результат. В окне терминала снова скомпилируйте программу и запустите её используемыми уже командами javac и java. Если всё сделали правильно, то теперь программа покажет ваше имя. Вы отлично справились!

Примечание: Синтаксис написания программ на языке Java очень похож на синтаксис языка C. Любой программист знакомый с C сможет легко освоит основы Java.

3. Java variables and Control flow

The next example illustrates the use of variables and control flow statements. On the same directory we stored the first program, let's now  create a second program called DiceRoller.java. Type it (or copy it) as shown below:

import java.util.Random;

public class DiceRoller {

  public static void main(String[] args) {
    Random generator = new Random();
    int d = 0;

    while (d < 4) {
      System.out.print("Rolling... ");
      int face = 1 + generator.nextInt(6);
      System.out.print("I got a "+ face
        + ".  ");
      if (face == 1) {
        System.out.print("Wow! An ACE!");
      }
      System.out.println();
      d = d + 1;
    }
  }

}

Now, let's compile it. Type:

  javac DiceRoller.java

And let's run it. Type:

  java DiceRoller

You'll see something similar to:

Rolling... I got a 2.
Rolling... I got a 1.  Wow! An ACE!
Rolling... I got a 4.
Rolling... I got a 5.

The program will roll four dice and will identify which ones are aces (the number 1). Do you see how it works?

There are quite a few things of interest in this example. This program uses two integer variables named d, and face: the first one (d) is used to make sure we roll four times, not three times, not five times; the second one (face) stores the rolled die face on each turn.

The program also receives an array of strings in the variable named args; this variable provides the command-line parameters you may type, but we are not using it in this example.

Finally, the program also uses the variable generator, Remember I told you a Java class can use other classes? This is an example. This program uses an existing class (called Random) that specializes on generating random numbers. A class can be used by calling its methods. In this case we only use one of its methods--the one called nextInt()--to get a random number.

Additionally, Java use of brackets { and } to define groups of instructions, called blocks. Each block can be empty, or have one or more instructions. You can define sub-blocks inside existing blocks as needed, commonly when you use control-flow statements.

Talking about this... this example shows the use of two control-flow statements: if and while. An if statement executes a block only if the condition specified in parenthesis is true; a while, on the other hand, will execute the nested block multiple times as long as the condition is true. Other control blocks are for, do-while, switch, if-else.

In the example, the if statement checks for the value of face. That's why the extra message appears only when an ace is rolled.

The while statement, on the other hand, executes the included block four times, because it checks the value of the variable d is less than 4. That variable starts in zero and increases by one at the end of the block. Therefore the first four times (0, 1, 2, 3) the while succeeds, but on the fifth one (when it has the value 4) it fails.

Усложним задачу #2: Change the program to roll 7 dice, where each dice has 10 faces. Once you save your changes, go to the terminal compile the program again and run it using the two commands (javac and java) shown before. If you do it right, the program will now display show all seven dice. Go for it!


